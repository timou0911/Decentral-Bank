/* Contract artifacts: files generated by the Truffle compiler that
   contain information about the contract(ABI, bytecode, address, ...) */
/* By using artifacts.require(), you can access the contract information 
   stored in the artifact, allowing you to interact with the deployed contract
   in your Truffle tests and migrations. */
const Tether = artifacts.require("Tether");
const RWD = artifacts.require("RWD");
const DecentralBank = artifacts.require("DecentralBank");

// Chai: assertion library to write tests
// chai-as-promised: a plugin for Chai that provides a set of assertions designed for testing asynchronous code
// .should(): sets Chai's default behavior to use the "should" style of assertions
require("chai").use(require("chai-as-promised")).should();

// All of the codes goes for testing, owner = accounts[0], customer = accounts[1]
contract("DecentralBank", ([owner, customer]) => {
  let tether, rwd, decentralBank;

  // eth -> wei
  function tokens(number) {
    return web3.utils.toWei(number, "ether");
  }

  // codes inside run fisrt before anything
  before(async () => { 
    // Load contracts
    tether = await Tether.new(); // creates a new instance(reference) of Tether contract
    rwd = await RWD.new(); // await: pause the execution of the code until the deployment is completed
    decentralBank = await DecentralBank.new(tether.address, rwd.address);

    // Transfer all tokens to DecentralBank (1 million)
    await rwd.transfer(decentralBank.address, tokens("1000000"));

    // Transfer 100 mUSDT t0 customer
    await tether.transfer(customer, tokens("100"), {from: owner});
  });

  /* describe -> define a test suite(a collection of related tests)
        1st argument: a string that describes the suite
        2nd argument: a callback function containing the tests 
    it -> define a test case
        1st argument: a string that describes the test
        2nd argument: a callback function containing the code for the test */

  describe("Mock Tether Deployment", async () => {
    it("matches name successfully", async () => {
        const name = await tether.name();
        assert.equal(name, "Mock Tether Token"); //assert(actual, expected, [message])
    });
  });

  describe("Reward Token Deployment", async () => {
    it("matches name successfully", async () => {
        const name = await rwd.name();
        assert.equal(name, "Reward Token");
    });
  });

  describe("Decentral Bank Deployment", async () => {
    it("matches name successfully", async () => {
        const name = await decentralBank.name();
        assert.equal(name, "Decentral Bank");
    });

    it("contract has tokens", async () => {
        let balance = await rwd.balanceOf(decentralBank.address);
        assert.equal(balance, tokens("1000000"));
    });

    describe("Yield Farming", async () => { // nested test suite
      it("rewards tokens for staking", async () => {
        // Check customer balance
        let result;
        result = await tether.balanceOf(customer);
        assert.equal(result.toString(), tokens("100"), "customer mUSDT balance before staking");

        // Check staking for customer of 100 tokens
        await tether.approve(decentralBank.address, tokens("100"), {from: customer});
        await decentralBank.depositTokens(tokens("100"), {from: customer});

        // Check balance of customer after staking
        result = await tether.balanceOf(customer);
        assert.equal(result.toString(), tokens("0"), "customer mUSDT balance after staking 100 tokens");

        // Check updated balance of Decentral Bank after customer staking
        result = await tether.balanceOf(decentralBank.address);
        assert.equal(result.toString(), tokens("100"), "decentral bank mUSDT balance after staking from customer");

        // Check isStaking status of customer after staking
        result = await decentralBank.isStaking(customer);
        assert.equal(result.toString(), "true", "customer isStaking status after staking");

        // Issue tokens: called by owner (should success)
        // await decentralBank.issueTokens({from: owner});

        // Issue tokens: called by others than owner (should failed)
        // await decentralBank.issueTokens({from: customer}).should.be.rejected;

        // Issue tokens
        await decentralBank.issueTokens({from: customer});
        result = await rwd.balanceOf(customer);
        assert.equal(result.toString(), tokens("10"), "customer's reward tokens after staking")

        // Unstake tokens
        await decentralBank.unstakeTokens({from: customer});

        // Check balance of customer after unstaking
        result = await tether.balanceOf(customer);
        assert.equal(result.toString(), tokens("100"), "customer mUSDT balance after unstaking");

        // Check updated balance of Decentral Bank after customer unstaking
        result = await tether.balanceOf(decentralBank.address);
        assert.equal(result.toString(), tokens("0"), "decentral bank mUSDT balance after customer unstaking");

        // Check isStaking status of customer after unstaking
        result = await decentralBank.isStaking(customer);
        assert.equal(result.toString(), "false", "customer isStaking status after unstaking");
      });
    });
  });
})